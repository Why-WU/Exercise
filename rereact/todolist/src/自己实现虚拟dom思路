1. 定义一个state 有数据
2. JSX 模版
3. 数据 + 模版 结合，生成真实的DOM，显示
4. state 发生改变
5. 数据 + 模版 结合，生成真实的DOM，替换原来的DOM

缺陷：
第一次生成了一个完整的DOM片段
第二次生成了一个完整的DOM片段
第二次的DOM替换第一次的DOM，非常耗费性能

1. state 数据
2. JSX 模版
3. 数据 + 模版 结合，生成真实的DOM，显示
4. state 发生改变
5. 数据 + 模版 结合，生成真实的DOM，并不直接替换原来的DOM
6. 新的DOM（DocumentFragment）和原来的DOM做比对，找差异
7. 找出发生改变的地方
8. 只用新的DOM中发生改变的地方替换掉原来的DOM中的地方

缺陷：
性能提升并不明显

1. 定义一个state 有数据
2. JSX 模版
3. 数据 + 模版 生成虚拟DOM（虚拟DOM是一个js对象，来描述真实DOM）
3. 用虚拟DOM的结构生成真实的DOM，显示
5. state 发生变化
6. 数据 + 模版 生成新的虚拟DOM
7. 比较原始虚拟DOM和新的虚拟DOM的区别
8. 直接操作DOM

JSX -> createElemnt -> 虚拟DOM（js对象） -> 真实DOM

优点：
1. 性能提升了
2. 使得跨端应用得以实现。React Native